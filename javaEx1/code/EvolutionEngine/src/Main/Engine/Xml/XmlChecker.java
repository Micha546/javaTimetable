package Main.Engine.Xml;

import Main.Engine.Xml.AutoGenerated.*;

import java.io.File;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class XmlChecker {

    public static void isLegalFile(String path)
    {
        if(!path.endsWith(".xml"))
            throw new RuntimeException("The file Path provided is not of a Xml file");

        File xmlFile = new File(path);

        if(!xmlFile.exists())
            throw new RuntimeException("The file Path provided does not exist");
    }

    public static void CheckDescriptor(ETTDescriptor descriptor)
    {
        AssertIdsInListsAreInAscendingOrderAndStartWith1(descriptor);
        AssertRulesShowOnce(descriptor);
        AssertAllTeacherTaughtSubjectsShowInSubjectArray(descriptor);
        AssertAllSubjectsIdsOfAGradesShowInSubjectArray(descriptor);
        AssertAllGradesHaveLessThanDaysTimesHoursStudyHours(descriptor);
    }

    private static void AssertIdsInListsAreInAscendingOrderAndStartWith1(ETTDescriptor descriptor)
    {
        List<ETTTeacher> ettTeachers = descriptor.getETTTimeTable().getETTTeachers().getETTTeacher();
        List<ETTClass> ettClasses = descriptor.getETTTimeTable().getETTClasses().getETTClass();
        List<ETTSubject> ettSubjects = descriptor.getETTTimeTable().getETTSubjects().getETTSubject();

        ettTeachers.sort(Comparator.comparingInt(ETTTeacher::getId));
        ettClasses.sort(Comparator.comparingInt(ETTClass::getId));
        ettSubjects.sort(Comparator.comparingInt(ETTSubject::getId));

        for(int i = 1; i <= ettTeachers.size(); ++i)
            if(ettTeachers.get(i - 1).getId() != i)
                throw new RuntimeException("The Teachers ids provided are not" +
                        " starting with 1 or are not in ascending order");

        for(int i = 1; i <= ettClasses.size(); ++i)
            if(ettClasses.get(i - 1).getId() != i)
                throw new RuntimeException("The Grades ids provided are not" +
                        " starting with 1 or are not in ascending order");

        for(int i = 1; i <= ettClasses.size(); ++i)
            if(ettSubjects.get(i - 1).getId() != i)
                throw new RuntimeException("The Subjects ids provided are not" +
                        " starting with 1 or are not in ascending order");
    }

    private static void AssertRulesShowOnce(ETTDescriptor descriptor)
    {
        Set<String> ruleNames = new HashSet<>();

        ETTRules rulesInEtt = descriptor.getETTTimeTable().getETTRules();

        for(ETTRule ettRule : rulesInEtt.getETTRule())
        {
            String thisRuleName = ettRule.getETTRuleId();
            if(ruleNames.contains(thisRuleName))
                throw new RuntimeException("The rule " + thisRuleName + " is provided twice");
            ruleNames.add(thisRuleName);
        }
    }

    private static Set<Integer> getSubjectIdSetFromETT(ETTSubjects ettSubjects)
    {
        Set<Integer> idSet = new HashSet<>();

        for(ETTSubject ettSubject : ettSubjects.getETTSubject())
            idSet.add(ettSubject.getId());

        return idSet;
    }

    private static void AssertAllTeacherTaughtSubjectsShowInSubjectArray(ETTDescriptor descriptor)
    {
        Set<Integer> subjectsIdSet = getSubjectIdSetFromETT(descriptor.getETTTimeTable().getETTSubjects());

        for(ETTTeacher ettTeacher : descriptor.getETTTimeTable().getETTTeachers().getETTTeacher())
            for(ETTTeaches subjectIdOfEttTeacher : ettTeacher.getETTTeaching().getETTTeaches())
                if(!subjectsIdSet.contains(subjectIdOfEttTeacher.getSubjectId()))
                    throw new RuntimeException("The teacher " + ettTeacher.getETTName() +
                            " Has a Subject (subject id=" + subjectIdOfEttTeacher.getSubjectId() +
                            ") which does not exist");
    }

    private static void AssertAllSubjectsIdsOfAGradesShowInSubjectArray(ETTDescriptor descriptor)
    {
        Set<Integer> subjectsIdSet = getSubjectIdSetFromETT(descriptor.getETTTimeTable().getETTSubjects());

        for(ETTClass ettGrade : descriptor.getETTTimeTable().getETTClasses().getETTClass())
            for(ETTStudy subjectIdOfGrade : ettGrade.getETTRequirements().getETTStudy())
                if(!subjectsIdSet.contains(subjectIdOfGrade.getSubjectId()))
                    throw new RuntimeException("The grade " + ettGrade.getETTName() +
                            " Has a Subject (subject id=" + subjectIdOfGrade.getSubjectId() +
                            ") which does not exist");
    }

    private static void AssertAllGradesHaveLessThanDaysTimesHoursStudyHours(ETTDescriptor descriptor)
    {
        int countOfHours;
        int daysTimesHours = descriptor.getETTTimeTable().getDays() * descriptor.getETTTimeTable().getHours();
        List<ETTClass> ettGrades = descriptor.getETTTimeTable().getETTClasses().getETTClass();

        for(ETTClass ettGrade : ettGrades)
        {
            countOfHours = 0;
            for(ETTStudy subject : ettGrade.getETTRequirements().getETTStudy())
                countOfHours += subject.getHours();
            if(countOfHours > daysTimesHours)
                throw new RuntimeException("The Grade " + ettGrade.getETTName() +
                        " has more study hours then there are in the time table");
        }
    }

}
