package InformationHolders;

import Main.Engine.Xml.AutoGenerated.ETTDescriptor;
import Utils.AlgorithmWrapper;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class User {
    private final String name;
    private final Map<Integer, AlgorithmWrapper> fileIdToAlgorithmOfUser;

    public User(String name) {
        this.name = name;
        this.fileIdToAlgorithmOfUser = new HashMap<>();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return Objects.equals(name, user.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name);
    }

    public String getName() {
        return name;
    }

    public synchronized boolean isWorkingOnAlgorithm(Integer algorithmId)
    {
        return fileIdToAlgorithmOfUser.containsKey(algorithmId);
    }

    public AlgorithmWrapper getAlgorithmOrCreate(Integer algorithmId, ETTDescriptor descriptor)
    {
        if(!fileIdToAlgorithmOfUser.containsKey(algorithmId))
            fileIdToAlgorithmOfUser.put(algorithmId, new AlgorithmWrapper(descriptor));

        return fileIdToAlgorithmOfUser.get(algorithmId);
    }

    public AlgorithmWrapper getAlgorithmOrNull(Integer algorithmId)
    {
        return fileIdToAlgorithmOfUser.get(algorithmId);
    }
}
